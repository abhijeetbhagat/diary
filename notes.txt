*Visual Studio (2013)*
Regex search includes including files starting with 'ipp'- #include\s["<]ipp

*Dumpbin*
- List dependencies of a DLL - $ dumpbin /dependents foo.dll
- List symbols of a DLL - $ dumpbin /symbols foo.dll

*Intel Performance Primitives library*
Build a C++ project with IPP library (v.2019) -
  a. Right click project > Properties
  b. Goto Intel Performance Libraries > Use Intel IPP and select 'Single-threaded DLL' 

*Recommendation system* 
  - co-occurence matrix (https://www.coursera.org/learn/ml-foundations/lecture/CdmdR/collaborative-filtering-people-who-bought-this-also-bought)
  - count-min-sketch algo (https://www.youtube.com/watch?v=ibxXO-b14j4)

*CDN*
- Content Delivery Network responsible for pull app content from server and delivering to the client.
- uses stable marriage matching algorithm

*C++*
- Iterating over "const char*" is different than std::string("string") in a range-based for loop. Use a reference in the range declaration.
- asserting can be done using the 'assert' macro from cassert header.
- Use the replace method in the algorithm header to replace chars in a string
- Use the erase(remove(...),...) pattern to remove desired chars from string
- A set from the set header stores unique values and derives from a tree
- Use reserve method on a string to change its capacity.
- Use the chrono header to use clocks to time program execution
- Use the thread header to use threading infrastructure.
- A string concat reserves space for the result before concat
- implementation of a string is in - https://github.com/gcc-mirror/gcc/libstdc++-v3/include/bits/basic_string.tcc
- use std::numeric_limits<int>::min()/max() for numeric int limits defined in the limits header
- "auto" doesn't work well will array declarations
- be careful with 'a & b == c' which is incorrect due to oerator precedence (== is higher than bitwise &)
- want to initialize a vector with a sequence of increasing integers? use std::iota from the numeric header
- use 'equal' from algorithm to compare collections
- convert a number to its binary representation by using std::bitset<32> from bitset header

*Bit twiddling*
- check if even : n&1 == 0
- check if power of 2 : n&(n-1) == 0

*GDB*
- compile with g++ using the -g flag and pass exe to gdb
- set breakpoint using 'b <line num>' and start using 'run'
- 'run' means run to the first breakpoint while 'start' means run from main()
- 'next' -> step-over, 'step' -> step-in
- gdbinit contains commands to be executed during gdb startup
- for gdb to work with python scripts for pretty printing, a python-enabled gdb must be used

*Git*
- git push -u origin master : needs to be done only once to setup the upstream. Once set, just git push without any args.
- git commit --ammend --author="username <email>" : fixes last commit author info.

*Bash*
- evaluate an expression : expr 1 + 1
- print ascii value of a char : printf "%d" "'a"
- print a-z : printf '%s' {a..z}

*Powershell*
- exponentiation: [math]::pow(2, 3)

*Networking*
- Nagle's algo : solves the 'small packet problem' by accumulating bytes and sending them in a single packet instead of individual packets. e.g. telnet
- Jitter : inter-arrival packet time. Solved using buffering at the receiving end.
- A rate-limiter (throttling requests bursts for an API) can be implemented using the leaky bucket algo.

*Multithreading*
- File IO : Multithreading might increase or decrease the performance. Keep the number of threads threshold configurable. - http://www.drdobbs.com/parallel/multithreaded-file-io

*Streaming*
- Dish TV uses MPEG-4 codec with encryption for video.

*DS*
- An ADT is abstract - lists, maps, queues, etc. - and it is implemented by a concrete data structure - linked-lists, hash-maps, arrays, etc.
- Auto sorting during insertion : use a priority queue ADT implemented using a heap data structure.
- A priority queue can be implemented as an array which can be visualised as a balanced binary tree.

*Algorithms*
- Intro to time complexity - https://www.youtube.com/watch?v=A03oI0znAoc
- Greedy algorithms used to solve optimization problems - problems that required either minimum or maximum result.
 - Optimization problems can be solved using :
    - Greedy method
    - Dynamic programming
    - Branch and bound

*GVim*
- Start recording by typing 'qd', then perform some actions, stop by typing 'q', '@d' to execute macro
- s : delete char and insert mode
- Ctl + W, x : swap current buffer with next

*Windows*
- Conemu + clink = <3
- Use Dependency Walker to see methods in a DLL

*.NET*
- Use the 'disableCommitThreadStack' flag in config file to enable/disable full thread stack committing. This can bring down memory consumption (tested on .NET 4).

*SonarQube*
- If using SonarQube version 7.2.1 with sonar-csharp-plugin-7.2.0, then use VS 2015 Update 3; it will not work otherwise

*Maths*
- AP : difference between two consecutive numbers in a series is same e.g. 1,5,9,13,...
- GP : ratio      between two consecutive numbers in a series is same e.g. 1,2,4,8,16,..
- HP : reciprocal of terms in a series is in API e.g. 1/3,1/5,1/7,1/9,...
